#include <stdio.h>
#include <stdlib.h>

// Funzione di confronto per qsort
int compare(const void *a, const void *b) {
    return (*(int*)a - *(int*)b);
}

void programma_corretto() {
    int vector[10], i;

    printf("Inserire fino a 10 numeri:\n");
    for (i = 0; i < 10; i++) {
        int c = i + 1;
        printf("[%d]: ", c);
        scanf("%d", &vector[i]);
    }

    // Ordina il vettore in ordine crescente
    qsort(vector, 10, sizeof(int), compare);

    printf("Il vettore ordinato in ordine crescente è:\n");
    for (i = 0; i < 10; i++) {
        printf("[%d]: %d\n", i + 1, vector[i]);
    }

    printf("Programma corretto terminato.\n");
}

void programma_con_errore() {
    int vector[10], i;
    printf("Inserire fino a 15 numeri (più di 10 causerà un errore):\n");
    for (i = 0; i < 15; i++) { // Questo ciclo tenta di leggere più valori del limite dell'array
        int c = i + 1;
        printf("[%d]: ", c);
        scanf("%d", &vector[i]); // Dopo 10, causerà accesso a memoria non valida
    }
    printf("Programma con errore terminato (potrebbe causare un crash).\n");
}

int main() {
    int scelta;

    // Mostra il menù e chiede la scelta all'utente
    printf("Scegli un'opzione:\n");
    printf("1. Esegui il programma corretto\n");
    printf("2. Esegui il programma che causa un errore di segmentazione\n");
    printf("Inserisci la tua scelta (1 o 2): ");
    scanf("%d", &scelta);

    switch (scelta) {
        case 1:
            programma_corretto();
            break;
        case 2:
            programma_con_errore();
            break;
        default:
            printf("Scelta non valida. Terminazione del programma.\n");
            exit(1);
    }

    // Pausa finale per evitare che il programma si chiuda subito
    printf("Premi invio per terminare il programma...");
    getchar(); // Assorbe l'invio precedente
    getchar(); // Attende un nuovo invio

    return 0;
}